"""
Streamlit Dashboard for AI Menu Recommendation System
‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import sys
import os

# Add src directory to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from models import HybridRecommendationSystem
from evaluation import RecommendationEvaluator

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Streamlit
st.set_page_config(
    page_title="üçΩÔ∏è AI Menu Recommendation System",
    page_icon="üçΩÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #FF6B6B;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .recommendation-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ cache ‡πÑ‡∏ß‡πâ"""
    try:
        customers = pd.read_csv('data/customers.csv')
        menu = pd.read_csv('data/menu.csv')
        orders = pd.read_csv('data/orders.csv')
        return customers, menu, orders
    except FileNotFoundError:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå data_generation.py ‡∏Å‡πà‡∏≠‡∏ô")
        return None, None, None

@st.cache_resource
def load_recommendation_system():
    """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞ cache ‡πÑ‡∏ß‡πâ"""
    try:
        system = HybridRecommendationSystem()
        return system
    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏î‡πâ: {e}")
        return None

def main():
    # Header
    st.markdown('<h1 class="main-header">üçΩÔ∏è AI Menu Recommendation System</h1>', unsafe_allow_html=True)
    st.markdown("---")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    customers, menu, orders = load_data()
    if customers is None:
        st.stop()
    
    # Sidebar
    st.sidebar.title("üéõÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°")
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤
    page = st.sidebar.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤",
        ["üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "üë§ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", "üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "üìà ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•"]
    )
    
    if page == "üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å":
        show_home_page(customers, menu, orders)
    elif page == "üë§ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•":
        show_recommendation_page(customers, menu, orders)
    elif page == "üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
        show_analytics_page(customers, menu, orders)
    elif page == "üìà ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•":
        show_evaluation_page()

def show_home_page(customers, menu, orders):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å - ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    st.header("üè† ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö")
    
    # Key Metrics
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
            value=f"{len(customers):,}",
            delta="Active Users"
        )
    
    with col2:
        st.metric(
            label="üçΩÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π",
            value=f"{len(menu):,}",
            delta="Available Items"
        )
    
    with col3:
        st.metric(
            label="üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå",
            value=f"{len(orders):,}",
            delta="Total Orders"
        )
    
    with col4:
        total_revenue = orders['amount'].sum()
        st.metric(
            label="üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°",
            value=f"{total_revenue:,.2f} ‡∏ø",
            delta="Revenue"
        )
    
    st.markdown("---")
    
    # Charts
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π")
        category_counts = menu['category'].value_counts()
        fig = px.pie(
            values=category_counts.values,
            names=category_counts.index,
            title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üë• ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
        age_bins = pd.cut(customers['age'], bins=[0, 25, 35, 45, 55, 100], labels=['18-25', '26-35', '36-45', '46-55', '55+'])
        age_counts = age_bins.value_counts()
        fig = px.bar(
            x=age_counts.index,
            y=age_counts.values,
            title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏"
        )
        fig.update_layout(xaxis_title="‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô")
        st.plotly_chart(fig, use_container_width=True)
    
    # Sales Analysis
    st.subheader("üìà ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
    
    # ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
    orders['order_date'] = pd.to_datetime(orders['order_date'])
    daily_sales = orders.groupby('order_date').agg({
        'amount': 'sum',
        'order_id': 'nunique'
    }).reset_index()
    
    fig = make_subplots(specs=[[{"secondary_y": True}]])
    
    fig.add_trace(
        go.Scatter(x=daily_sales['order_date'], y=daily_sales['amount'], name="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ø)"),
        secondary_y=False,
    )
    
    fig.add_trace(
        go.Scatter(x=daily_sales['order_date'], y=daily_sales['order_id'], name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå"),
        secondary_y=True,
    )
    
    fig.update_xaxes(title_text="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
    fig.update_yaxes(title_text="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)", secondary_y=False)
    fig.update_yaxes(title_text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå", secondary_y=True)
    fig.update_layout(title_text="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    
    st.plotly_chart(fig, use_container_width=True)

def show_recommendation_page(customers, menu, orders):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•"""
    st.header("üë§ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    customer_ids = customers['customer_id'].tolist()
    selected_customer = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:", customer_ids)
    
    if selected_customer:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        customer_info = customers[customers['customer_id'] == selected_customer].iloc[0]
        customer_orders = orders[orders['customer_id'] == selected_customer]
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
            
            st.markdown(f"""
            <div class="metric-card">
            <h4>üë§ {selected_customer}</h4>
            <p><strong>üéÇ ‡∏≠‡∏≤‡∏¢‡∏∏:</strong> {customer_info['age']} ‡∏õ‡∏µ</p>
            <p><strong>‚öß ‡πÄ‡∏û‡∏®:</strong> {'‡∏ä‡∏≤‡∏¢' if customer_info['gender'] == 'M' else '‡∏´‡∏ç‡∏¥‡∏á'}</p>
            <p><strong>üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:</strong> {customer_info['avg_budget']:.2f} ‡∏ö‡∏≤‡∏ó</p>
            <p><strong>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö:</strong> {customer_info['preferred_time']}</p>
            <p><strong>üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå:</strong> {len(customer_orders)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.subheader("üçΩÔ∏è ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£")
            if len(customer_orders) > 0:
                category_orders = customer_orders['category'].value_counts()
                fig = px.bar(
                    x=category_orders.values,
                    y=category_orders.index,
                    orientation='h',
                    title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà - ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£")
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        st.markdown("---")
        st.subheader("ü§ñ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å AI")
        
        if st.button("üéØ ‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π", type="primary"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π..."):
                try:
                    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
                    recommended_menus = get_simple_recommendations(customer_info, menu, customer_orders)
                    
                    st.success("‚úÖ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß!")
                    
                    col1, col2 = st.columns(2)
                    
                    for i, (idx, rec) in enumerate(recommended_menus.iterrows()):
                        col = col1 if i % 2 == 0 else col2
                        
                        with col:
                            st.markdown(f"""
                            <div class="recommendation-card">
                            <h4>üçΩÔ∏è {rec['menu_name']}</h4>
                            <p><strong>üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</strong> {rec['category']}</p>
                            <p><strong>üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤:</strong> {rec['price']:.2f} ‡∏ö‡∏≤‡∏ó</p>
                            <p><strong>‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°:</strong> {rec['popularity']:.1f}/5.0</p>
                            <p><strong>üí° ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:</strong> {rec['reason']}</p>
                            </div>
                            """, unsafe_allow_html=True)
                
                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

def get_simple_recommendations(customer_info, menu, customer_orders, top_k=6):
    """‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo"""
    
    # ‡∏•‡∏≠‡∏á‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
    budget = customer_info['avg_budget']
    age = customer_info['age']
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏≤‡∏°‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    affordable_menu = menu[menu['price'] <= budget * 0.8].copy()
    
    if len(affordable_menu) == 0:
        affordable_menu = menu.copy()
    
    # ‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö
    if len(customer_orders) > 0:
        favorite_categories = customer_orders['category'].value_counts().index.tolist()
    else:
        favorite_categories = ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', '‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô']
    
    recommendations = []
    reasons = []
    
    # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°
    for category in favorite_categories:
        cat_menus = affordable_menu[affordable_menu['category'] == category].nlargest(2, 'popularity')
        for _, menu_item in cat_menus.iterrows():
            if len(recommendations) < top_k:
                recommendations.append(menu_item)
                if len(customer_orders) > 0:
                    reasons.append(f"‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö ({category})")
                else:
                    reasons.append(f"‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î {category}")
    
    # ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°
    while len(recommendations) < top_k:
        remaining_menus = affordable_menu[~affordable_menu['menu_id'].isin([r['menu_id'] for r in recommendations])]
        if len(remaining_menus) == 0:
            break
        
        popular_menu = remaining_menus.nlargest(1, 'popularity').iloc[0]
        recommendations.append(popular_menu)
        reasons.append("‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
    result_df = pd.DataFrame(recommendations[:top_k])
    result_df['reason'] = reasons[:top_k]
    
    return result_df

def show_analytics_page(customers, menu, orders):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    st.header("üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
    
    # Analysis Options
    analysis_type = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:",
        ["üìà ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°", "üë• ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", "üçΩÔ∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π", "‚è∞ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ß‡∏•‡∏≤"]
    )
    
    if analysis_type == "üìà ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°":
        show_sales_analysis(orders, menu)
    elif analysis_type == "üë• ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤":
        show_customer_analysis(customers, orders)
    elif analysis_type == "üçΩÔ∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π":
        show_menu_analysis(menu, orders)
    elif analysis_type == "‚è∞ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ß‡∏•‡∏≤":
        show_time_analysis(orders)

def show_sales_analysis(orders, menu):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢"""
    st.subheader("üìà ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Top selling items
        top_items = orders.groupby('menu_name').agg({
            'quantity': 'sum',
            'amount': 'sum'
        }).sort_values('quantity', ascending=False).head(10)
        
        fig = px.bar(
            x=top_items['quantity'],
            y=top_items.index,
            orientation='h',
            title="üèÜ Top 10 ‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô)"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Revenue by category
        category_revenue = orders.groupby('category')['amount'].sum().sort_values(ascending=False)
        
        fig = px.pie(
            values=category_revenue.values,
            names=category_revenue.index,
            title="üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
        )
        st.plotly_chart(fig, use_container_width=True)

def show_customer_analysis(customers, orders):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"""
    st.subheader("üë• ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
    
    # Customer segmentation
    customer_stats = orders.groupby('customer_id').agg({
        'amount': ['sum', 'mean', 'count']
    }).round(2)
    
    customer_stats.columns = ['total_spent', 'avg_order', 'order_count']
    customer_stats = customer_stats.merge(customers[['customer_id', 'age', 'gender']], 
                                        left_index=True, right_on='customer_id')
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Spending by age group
        age_bins = pd.cut(customer_stats['age'], bins=[0, 25, 35, 45, 55, 100], 
                         labels=['18-25', '26-35', '36-45', '46-55', '55+'])
        age_spending = customer_stats.groupby(age_bins)['total_spent'].mean()
        
        fig = px.bar(
            x=age_spending.index,
            y=age_spending.values,
            title="üí≥ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Order frequency distribution
        fig = px.histogram(
            customer_stats,
            x='order_count',
            title="üìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
        )
        st.plotly_chart(fig, use_container_width=True)

def show_menu_analysis(menu, orders):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π"""
    st.subheader("üçΩÔ∏è ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π")
    
    menu_performance = orders.groupby('menu_id').agg({
        'quantity': 'sum',
        'amount': 'sum',
        'customer_id': 'nunique'
    }).rename(columns={'customer_id': 'unique_customers'})
    
    menu_performance = menu_performance.merge(menu, on='menu_id')
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Price vs Popularity
        fig = px.scatter(
            menu_performance,
            x='price',
            y='quantity',
            size='unique_customers',
            color='category',
            title="üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤ vs ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°",
            hover_data=['menu_name']
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Category performance
        category_perf = menu_performance.groupby('category').agg({
            'quantity': 'sum',
            'amount': 'sum',
            'unique_customers': 'sum'
        })
        
        fig = px.bar(
            x=category_perf.index,
            y=category_perf['quantity'],
            title="üìä ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
        )
        st.plotly_chart(fig, use_container_width=True)

def show_time_analysis(orders):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤"""
    st.subheader("‚è∞ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤")
    
    orders['order_date'] = pd.to_datetime(orders['order_date'])
    orders['day_of_week'] = orders['order_date'].dt.day_name()
    orders['hour'] = pd.to_datetime(orders['order_time']).dt.hour
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Sales by day of week
        daily_sales = orders.groupby('day_of_week')['amount'].sum()
        day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        daily_sales = daily_sales.reindex(day_order)
        
        fig = px.bar(
            x=daily_sales.index,
            y=daily_sales.values,
            title="üìÖ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Sales by hour
        hourly_sales = orders.groupby('hour')['amount'].sum()
        
        fig = px.line(
            x=hourly_sales.index,
            y=hourly_sales.values,
            title="üïê ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"
        )
        st.plotly_chart(fig, use_container_width=True)

def show_evaluation_page():
    """‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
    st.header("üìà ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    
    st.info("üöß ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• ML ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡πâ‡∏ß")
    
    # Mock evaluation results for demo
    st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
    
    metrics_data = {
        'Metric': ['Precision@5', 'Recall@5', 'F1-Score@5', 'Hit Rate@5', 'MRR@5'],
        'Score': [0.75, 0.68, 0.71, 0.85, 0.62]
    }
    
    metrics_df = pd.DataFrame(metrics_data)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.dataframe(metrics_df, use_container_width=True)
    
    with col2:
        fig = px.bar(
            metrics_df,
            x='Metric',
            y='Score',
            title="üìà ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    st.markdown("---")
    st.subheader("üìù ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
    
    st.markdown("""
    ### ‚úÖ ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•:
    - **Hit Rate ‡∏™‡∏π‡∏á (85%)**: ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏î‡∏µ
    - **Precision ‡∏î‡∏µ (75%)**: ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏ï‡∏£‡∏á‡πÉ‡∏à‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    - **‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£**: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    
    ### ‚ö†Ô∏è ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:
    - **Recall**: ‡∏¢‡∏±‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ä‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
    - **MRR**: ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£
    - **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢**: ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    
    ### üéØ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤:
    1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• features ‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß, ‡πÄ‡∏ß‡∏•‡∏≤, ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    2. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° neural network
    3. ‡πÄ‡∏û‡∏¥‡πà‡∏° diversity ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    4. A/B testing ‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á
    """)

if __name__ == "__main__":
    main()
