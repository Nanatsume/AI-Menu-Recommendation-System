"""
Data Generation Module for AI Menu Recommendation System
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£
"""

import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta
import os

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ random seed ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠
np.random.seed(42)
random.seed(42)

class DataGenerator:
    def __init__(self):
        self.data_dir = "data"
        os.makedirs(self.data_dir, exist_ok=True)
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á
        self.thai_foods = [
            "‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î", "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á", "‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏Å‡πà", "‡∏™‡πâ‡∏°‡∏ï‡∏≥", "‡∏•‡∏≤‡∏ö‡∏´‡∏°‡∏π", 
            "‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤", "‡πÅ‡∏Å‡∏á‡∏™‡πâ‡∏°‡∏õ‡∏•‡∏≤", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢", "‡∏´‡∏°‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏ö", "‡∏õ‡∏•‡∏≤‡∏Å‡∏∞‡∏û‡∏á‡∏ô‡∏∂‡πà‡∏á‡∏°‡∏∞‡∏ô‡∏≤‡∏ß",
            "‡πÅ‡∏Å‡∏á‡∏°‡∏±‡∏™‡∏°‡∏±‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "‡∏¢‡∏≥‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô", "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡∏ï‡πâ‡∏°‡∏¢‡∏≥", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏•‡∏∏‡∏Å‡∏Å‡∏∞‡∏õ‡∏¥",
            "‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î‡∏´‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà", "‡∏´‡∏≠‡∏¢‡∏ó‡∏≠‡∏î", "‡∏ú‡∏±‡∏î‡∏ã‡∏µ‡∏≠‡∏¥‡πä‡∏ß", "‡πÅ‡∏Å‡∏á‡πÄ‡∏õ‡∏≠‡∏∞", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤"
        ]
        
        self.beverages = [
            "‡∏ä‡∏≤‡πÄ‡∏¢‡πá‡∏ô", "‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏¢‡πá‡∏ô", "‡∏ô‡πâ‡∏≥‡∏™‡πâ‡∏°", "‡∏ô‡πâ‡∏≥‡∏°‡∏∞‡∏ô‡∏≤‡∏ß", "‡πÇ‡∏Ñ‡πâ‡∏Å", "‡∏™‡πÑ‡∏õ‡∏£‡∏ó‡πå",
            "‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤", "‡∏ä‡∏≤‡∏£‡πâ‡∏≠‡∏ô", "‡∏Å‡∏≤‡πÅ‡∏ü‡∏£‡πâ‡∏≠‡∏ô", "‡∏ô‡πâ‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏£‡∏ß‡∏°", "‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÉ‡∏™",
            "‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏î‡∏•‡∏°", "‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå", "‡∏ô‡πâ‡∏≥‡πÅ‡∏î‡∏á", "‡∏ô‡∏°‡πÄ‡∏¢‡πá‡∏ô"
        ]
        
        self.desserts = [
            "‡∏Ç‡∏ô‡∏°‡∏Ñ‡∏£‡∏Å", "‡∏ó‡∏±‡∏ö‡∏ó‡∏¥‡∏°‡∏Å‡∏£‡∏≠‡∏ö", "‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á", "‡∏•‡∏π‡∏Å‡∏ä‡∏∏‡∏ö", "‡∏ü‡∏±‡∏Å‡∏ó‡∏≠‡∏á",
            "‡∏ö‡∏±‡∏ß‡∏•‡∏≠‡∏¢", "‡πÑ‡∏≠‡∏ï‡∏¥‡∏°", "‡πÄ‡∏Ñ‡πâ‡∏Å", "‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ", "‡∏ö‡∏£‡∏≤‡∏ß‡∏ô‡∏µ‡πà", "‡∏ú‡∏•‡πÑ‡∏°‡πâ"
        ]
        
        self.food_categories = {
            "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å": self.thai_foods,
            "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°": self.beverages, 
            "‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô": self.desserts
        }
        
    def generate_customers(self, n_customers=500):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"""
        print(f"üßë‚Äçü§ù‚Äçüßë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {n_customers} ‡∏Ñ‡∏ô...")
        
        customers = []
        for i in range(n_customers):
            age = np.random.randint(18, 65)
            gender = random.choice(['M', 'F'])
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏
            if age < 25:
                budget = np.random.normal(150, 50)
            elif age < 40:
                budget = np.random.normal(300, 100)
            else:
                budget = np.random.normal(250, 80)
            
            budget = max(50, budget)  # ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 50 ‡∏ö‡∏≤‡∏ó
            
            # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏°‡∏≤‡∏£‡πâ‡∏≤‡∏ô
            preferred_times = random.choices(
                ['morning', 'lunch', 'afternoon', 'dinner', 'late_night'],
                weights=[0.1, 0.3, 0.15, 0.35, 0.1]
            )[0]
            
            customers.append({
                'customer_id': f'C{i+1:04d}',
                'age': age,
                'gender': gender,
                'avg_budget': round(budget, 2),
                'preferred_time': preferred_times
            })
            
        df_customers = pd.DataFrame(customers)
        df_customers.to_csv(f'{self.data_dir}/customers.csv', index=False, encoding='utf-8-sig')
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(df_customers)} ‡∏Ñ‡∏ô")
        return df_customers
    
    def generate_menu(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£"""
        print("üçΩÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π...")
        
        menu_items = []
        item_id = 1
        
        for category, foods in self.food_categories.items():
            for food in foods:
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                if category == "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å":
                    price = np.random.normal(80, 30)
                elif category == "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°":
                    price = np.random.normal(25, 10)
                else:  # ‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô
                    price = np.random.normal(40, 15)
                
                price = max(15, round(price, 2))  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 15 ‡∏ö‡∏≤‡∏ó
                
                # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏° (1-5)
                popularity = round(np.random.uniform(2.5, 5.0), 1)
                
                menu_items.append({
                    'menu_id': f'M{item_id:03d}',
                    'menu_name': food,
                    'category': category,
                    'price': price,
                    'popularity': popularity
                })
                item_id += 1
        
        df_menu = pd.DataFrame(menu_items)
        df_menu.to_csv(f'{self.data_dir}/menu.csv', index=False, encoding='utf-8-sig')
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(df_menu)} ‡πÄ‡∏°‡∏ô‡∏π")
        return df_menu
    
    def generate_orders(self, df_customers, df_menu, n_orders=10000):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£"""
        print(f"üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ {n_orders} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...")
        
        orders = []
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
        start_date = datetime.now() - timedelta(days=180)
        
        for i in range(n_orders):
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
            customer = df_customers.sample(1).iloc[0]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
            order_date = start_date + timedelta(days=random.randint(0, 180))
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á (1-4 ‡πÄ‡∏°‡∏ô‡∏π)
            n_items = random.choices([1, 2, 3, 4], weights=[0.4, 0.35, 0.2, 0.05])[0]
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö
            selected_menus = self._select_menus_for_customer(
                customer, df_menu, n_items
            )
            
            total_amount = 0
            for menu in selected_menus:
                quantity = random.choice([1, 1, 1, 2])  # ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏±‡πà‡∏á 1 ‡∏à‡∏≤‡∏ô
                amount = menu['price'] * quantity
                total_amount += amount
                
                orders.append({
                    'order_id': f'O{i+1:06d}',
                    'customer_id': customer['customer_id'],
                    'menu_id': menu['menu_id'],
                    'menu_name': menu['menu_name'],
                    'category': menu['category'],
                    'quantity': quantity,
                    'unit_price': menu['price'],
                    'amount': amount,
                    'order_date': order_date.strftime('%Y-%m-%d'),
                    'order_time': self._get_order_time(customer['preferred_time']),
                    'day_of_week': order_date.strftime('%A')
                })
        
        df_orders = pd.DataFrame(orders)
        df_orders.to_csv(f'{self.data_dir}/orders.csv', index=False, encoding='utf-8-sig')
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(df_orders)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        return df_orders
    
    def _select_menus_for_customer(self, customer, df_menu, n_items):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏≤‡∏°‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"""
        selected = []
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏≤‡∏°‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
        affordable_menu = df_menu[df_menu['price'] <= customer['avg_budget'] * 0.8]
        
        if len(affordable_menu) == 0:
            affordable_menu = df_menu
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡πà‡∏°
        weights = affordable_menu['popularity'].values
        weights = weights / weights.sum()
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        selected_indices = np.random.choice(
            len(affordable_menu), 
            size=min(n_items, len(affordable_menu)), 
            replace=False, 
            p=weights
        )
        
        for idx in selected_indices:
            selected.append(affordable_menu.iloc[idx].to_dict())
        
        return selected
    
    def _get_order_time(self, preferred_time):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö"""
        time_ranges = {
            'morning': (7, 10),
            'lunch': (11, 14), 
            'afternoon': (14, 17),
            'dinner': (17, 21),
            'late_night': (21, 23)
        }
        
        start_hour, end_hour = time_ranges[preferred_time]
        hour = random.randint(start_hour, end_hour)
        minute = random.randint(0, 59)
        
        return f"{hour:02d}:{minute:02d}"
    
    def generate_all_data(self, n_customers=500, n_orders=10000):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        df_customers = self.generate_customers(n_customers)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π
        df_menu = self.generate_menu()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        df_orders = self.generate_orders(df_customers, df_menu, n_orders)
        
        print("\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:")
        print(f"   üë• ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {len(df_customers)} ‡∏Ñ‡∏ô")
        print(f"   üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π: {len(df_menu)} ‡πÄ‡∏°‡∏ô‡∏π")
        print(f"   üìù ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: {len(df_orders)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"   üíæ ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô folder: {self.data_dir}/")
        
        return df_customers, df_menu, df_orders

if __name__ == "__main__":
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
    generator = DataGenerator()
    df_customers, df_menu, df_orders = generator.generate_all_data()
    
    print("\nüéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
