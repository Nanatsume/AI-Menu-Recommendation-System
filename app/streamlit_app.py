"""
üçΩÔ∏è AI Menu Recommendation System - Web Dashboard
‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import sys
import os

# ‡∏õ‡∏¥‡∏î TensorFlow warnings
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import modules
current_dir = os.path.dirname(os.path.abspath(__file__))
workspace_dir = os.path.dirname(current_dir)
src_dir = os.path.join(workspace_dir, 'src')
sys.path.append(workspace_dir)
sys.path.append(src_dir)

# Import modules
try:
    from src.data_generation import DataGenerator
    from src.model_factory import create_simple_matrix_factorization, ModelFactory
    from src.evaluation_fixed import AdvancedRecommendationEvaluator
    from src.advanced_features import CustomerSegmentation, TrendAnalyzer, ContentBasedRecommender
except ImportError as e:
    st.error(f"‚ùå Error importing modules: {e}")
    st.stop()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="üçΩÔ∏è AI Menu Recommendation System",
    page_icon="üçΩÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö styling
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #FF6B6B;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    .metric-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    .recommendation-card {
        background: rgba(30, 35, 42, 0.8);
        color: #fafafa;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #4ECDC4;
        margin: 0.5rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        backdrop-filter: blur(10px);
    }
    .recommendation-card h4 {
        color: #4ECDC4 !important;
    }
    .recommendation-card p {
        color: #e0e0e0 !important;
        margin: 0.3rem 0 !important;
    }
    .recommendation-card strong {
        color: #fafafa !important;
    }
</style>
""", unsafe_allow_html=True)

# Cache data loading
@st.cache_data
def load_data():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô cache"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        data_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data')
        customers_file = os.path.join(data_dir, 'customers.csv')
        menu_file = os.path.join(data_dir, 'menu.csv')
        orders_file = os.path.join(data_dir, 'orders.csv')
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
        if os.path.exists(customers_file) and os.path.exists(menu_file) and os.path.exists(orders_file):
            st.info("üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß...")
            df_customers = pd.read_csv(customers_file)
            df_menu = pd.read_csv(menu_file)
            df_orders = pd.read_csv(orders_file)
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            st.info("üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà...")
            generator = DataGenerator()
            df_customers, df_menu, df_orders = generator.generate_all_data()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç column names ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if 'menu_name' not in df_orders.columns and 'name' in df_menu.columns:
            # Merge ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ menu_name
            df_orders = df_orders.merge(df_menu[['menu_id', 'name', 'category']], on='menu_id', how='left')
            df_orders = df_orders.rename(columns={'name': 'menu_name'})
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° quantity column ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
        if 'quantity' not in df_orders.columns:
            df_orders['quantity'] = 1  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 1
        
        return df_customers, df_menu, df_orders
    except Exception as e:
        st.error(f"Error loading data: {e}")
        import traceback
        st.error(traceback.format_exc())
        return None, None, None

# Cache model training
@st.cache_resource
def load_model(user_item_matrix):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô cache"""
    try:
        model = create_simple_matrix_factorization(user_item_matrix, n_components=30)
        return model
    except Exception as e:
        st.error(f"Error training model: {e}")
        return None

@st.cache_data
def create_realistic_ratings(df_orders, df_menu, df_customers):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á rating ‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
    df_orders = df_orders.copy()
    
    # ‡πÉ‡∏ä‡πâ seed ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    np.random.seed(42)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì rating ‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ
    ratings = []
    
    for _, order in df_orders.iterrows():
        # Base rating (3.0-5.0)
        base_rating = 3.5
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å popularity ‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π
        if 'menu_id' in order and order['menu_id'] in df_menu['menu_id'].values:
            menu_info = df_menu[df_menu['menu_id'] == order['menu_id']].iloc[0]
            if 'popularity' in menu_info:
                popularity_factor = (menu_info['popularity'] - 3.0) * 0.3  # ‡∏õ‡∏£‡∏±‡∏ö scale
                base_rating += popularity_factor
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å budget ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ vs ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏°‡∏ô‡∏π
        if 'customer_id' in order and order['customer_id'] in df_customers['customer_id'].values:
            customer_info = df_customers[df_customers['customer_id'] == order['customer_id']].iloc[0]
            if 'avg_budget' in customer_info and 'amount' in order:
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì rating ‡∏à‡∏∞‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤
                budget_ratio = order['amount'] / customer_info['avg_budget']
                if budget_ratio <= 0.5:  # ‡∏ñ‡∏π‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏á‡∏ö
                    base_rating += 0.3
                elif budget_ratio > 1.2:  # ‡πÅ‡∏û‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö
                    base_rating -= 0.4
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å quantity (‡∏™‡∏±‡πà‡∏á‡πÄ‡∏¢‡∏≠‡∏∞ = ‡∏ä‡∏≠‡∏ö‡∏°‡∏≤‡∏Å)
        if 'quantity' in order and order['quantity'] > 1:
            quantity_bonus = min(0.4, (order['quantity'] - 1) * 0.1)
            base_rating += quantity_bonus
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ customer_id ‡πÄ‡∏õ‡πá‡∏ô seed
        customer_variance = np.random.normal(0, 0.2)  # variation ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        base_rating += customer_variance
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏ß‡πâ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1.0 - 5.0
        final_rating = max(1.0, min(5.0, base_rating))
        ratings.append(round(final_rating, 1))
    
    df_orders['rating'] = ratings
    return df_orders

def main():
    # Header
    st.markdown('<h1 class="main-header">üçΩÔ∏è AI Menu Recommendation System</h1>', unsafe_allow_html=True)
    st.markdown("### ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ - Interactive Dashboard")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
        df_customers, df_menu, df_orders = load_data()
    
    if df_customers is None:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á user-item matrix
    try:
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° rating column ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°
        if 'rating' not in df_orders.columns:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á rating ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
            df_orders = create_realistic_ratings(df_orders, df_menu, df_customers)
        
        user_item_matrix = df_orders.pivot_table(
            index='customer_id', 
            columns='menu_id', 
            values='rating',
            fill_value=0
        )
    except Exception as e:
        st.error(f"Error creating user-item matrix: {e}")
        return
    
    # Sidebar
    st.sidebar.header("üéõÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤
    page = st.sidebar.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
        ["üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "ü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", "üë• ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", "üìä Business Intelligence", "üìà Model Performance"]
    )
    
    st.sidebar.markdown("---")
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if st.sidebar.button("üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà", help="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
        # ‡∏•‡∏ö cache ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
        st.cache_data.clear()
        st.cache_resource.clear()
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        data_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data')
        for filename in ['customers.csv', 'menu.csv', 'orders.csv']:
            filepath = os.path.join(data_dir, filename)
            if os.path.exists(filepath):
                os.remove(filepath)
        st.rerun()
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á cache
    if st.sidebar.button("üßπ ‡∏•‡πâ‡∏≤‡∏á Cache", help="‡∏•‡πâ‡∏≤‡∏á cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
        st.cache_data.clear()
        st.cache_resource.clear()
        st.rerun()
    
    st.sidebar.markdown("---")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    st.sidebar.header("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö")
    st.sidebar.metric("üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", len(df_customers))
    st.sidebar.metric("üçΩÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π", len(df_menu))
    st.sidebar.metric("üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå", len(df_orders))
    st.sidebar.metric("üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{df_orders['amount'].sum():,.0f} ‡∏ö‡∏≤‡∏ó")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if page == "üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å":
        show_homepage(df_customers, df_menu, df_orders)
    elif page == "ü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥":
        show_recommendation_page(df_customers, df_menu, df_orders, user_item_matrix)
    elif page == "üë• ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤":
        show_customer_analysis(df_customers, df_menu, df_orders)
    elif page == "üìä Business Intelligence":
        show_business_intelligence(df_customers, df_menu, df_orders)
    elif page == "üìà Model Performance":
        show_model_performance(df_customers, df_menu, df_orders, user_item_matrix)

def show_homepage(df_customers, df_menu, df_orders):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å - ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö"""
    
    st.header("üéØ ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π")
    
    # Metrics
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f'''
        <div class="metric-container">
            <h3>üë• {len(df_customers)}</h3>
            <p>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
        </div>
        ''', unsafe_allow_html=True)
    
    with col2:
        st.markdown(f'''
        <div class="metric-container">
            <h3>üçΩÔ∏è {len(df_menu)}</h3>
            <p>‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
        </div>
        ''', unsafe_allow_html=True)
    
    with col3:
        st.markdown(f'''
        <div class="metric-container">
            <h3>üìù {len(df_orders):,}</h3>
            <p>‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
        </div>
        ''', unsafe_allow_html=True)
    
    with col4:
        avg_order = df_orders['amount'].mean()
        st.markdown(f'''
        <div class="metric-container">
            <h3>üí∞ {avg_order:.0f}</h3>
            <p>‡∏¢‡∏≠‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</p>
        </div>
        ''', unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Charts
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
        try:
            # ‡πÉ‡∏ä‡πâ column ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            if 'category' in df_orders.columns:
                category_sales = df_orders.groupby('category')['amount'].sum().reset_index()
            else:
                # merge ‡∏Å‡∏±‡∏ö df_menu ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ category
                merged_data = df_orders.merge(df_menu, on='menu_id', how='left')
                category_sales = merged_data.groupby('category')['amount'].sum().reset_index()
            
            fig_pie = px.pie(category_sales, values='amount', names='category', 
                            title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
            st.plotly_chart(fig_pie, use_container_width=True)
        except Exception as e:
            st.error(f"Error creating category chart: {e}")
    
    with col2:
        st.subheader("üèÜ ‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° Top 10")
        try:
            # ‡πÉ‡∏ä‡πâ column ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            if 'menu_name' in df_orders.columns and 'quantity' in df_orders.columns:
                popular_menus = df_orders.groupby('menu_name')['quantity'].sum().nlargest(10).reset_index()
            elif 'menu_name' in df_orders.columns and 'amount' in df_orders.columns:
                popular_menus = df_orders.groupby('menu_name')['amount'].sum().nlargest(10).reset_index()
                popular_menus.columns = ['menu_name', 'quantity']
            else:
                # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å merge
                merged_data = df_orders.merge(df_menu, on='menu_id', how='left')
                if 'menu_name_y' in merged_data.columns:
                    popular_menus = merged_data.groupby('menu_name_y')['amount'].sum().nlargest(10).reset_index()
                    popular_menus.columns = ['menu_name', 'quantity']
                else:
                    popular_menus = merged_data.groupby('menu_name')['amount'].sum().nlargest(10).reset_index()
                    popular_menus.columns = ['menu_name', 'quantity']
                    
            fig_bar = px.bar(popular_menus, x='quantity', y='menu_name', 
                            orientation='h', title="‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
            fig_bar.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig_bar, use_container_width=True)
        except Exception as e:
            st.error(f"Error creating popular menu chart: {e}")
    
    # Recent Activity
    st.subheader("üìà ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á order_date ‡πÄ‡∏õ‡πá‡∏ô datetime ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô string
        df_orders_copy = df_orders.copy()
        if df_orders_copy['order_date'].dtype == 'object':
            df_orders_copy['order_date'] = pd.to_datetime(df_orders_copy['order_date'])
        
        recent_orders = df_orders_copy.nlargest(10, 'order_date')[['customer_id', 'menu_name', 'quantity', 'amount', 'order_date']]
        st.dataframe(recent_orders, use_container_width=True)
    except Exception as e:
        st.error(f"Error showing recent activity: {e}")
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÅ‡∏ó‡∏ô
        df_orders_copy = df_orders.copy()
        recent_orders = df_orders_copy.tail(10)[['customer_id', 'menu_name', 'quantity', 'amount', 'order_date']]
        st.dataframe(recent_orders, use_container_width=True)

def show_recommendation_page(df_customers, df_menu, df_orders, user_item_matrix):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"""
    
    st.header("ü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
    with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• AI..."):
        model = load_model(user_item_matrix)
    
    if model is None:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ")
        return
    
    st.success("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    st.subheader("üë§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á customer display names
        customer_options = []
        for _, customer in df_customers.head(20).iterrows():  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 20 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
            display_name = f"{customer['customer_id']} (‡∏≠‡∏≤‡∏¢‡∏∏ {customer['age']}, ‡∏á‡∏ö {customer['avg_budget']:.0f}‡∏ö)"
            customer_options.append((customer['customer_id'], display_name))
        
        selected_customer_id = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:",
            options=[cid for cid, _ in customer_options],
            format_func=lambda x: next(name for cid, name in customer_options if cid == x)
        )
        
        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        top_k = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:", 5, 20, 10)
    
    with col2:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        customer_info = df_customers[df_customers['customer_id'] == selected_customer_id].iloc[0]
        st.markdown(f"""
        **üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:**
        - **ID:** {customer_info['customer_id']}
        - **‡∏≠‡∏≤‡∏¢‡∏∏:** {customer_info['age']} ‡∏õ‡∏µ
        - **‡πÄ‡∏û‡∏®:** {'‡∏ä‡∏≤‡∏¢' if customer_info['gender'] == 'M' else '‡∏´‡∏ç‡∏¥‡∏á'}
        - **‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:** {customer_info['avg_budget']:.0f} ‡∏ö‡∏≤‡∏ó
        - **‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö:** {customer_info['preferred_time']}
        """)
    
    if st.button("üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", type="primary"):
        try:
            # ‡∏´‡∏≤ user index
            user_idx = list(user_item_matrix.index).index(selected_customer_id)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            with st.spinner("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥..."):
                recommendations = model.predict_for_user(user_idx, top_k=top_k)
            
            st.subheader(f"üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {selected_customer_id}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏£‡∏π‡∏õ cards
            cols = st.columns(2)
            
            for i, (menu_id, score) in enumerate(recommendations):
                try:
                    menu_info = df_menu[df_menu['menu_id'] == menu_id].iloc[0]
                    
                    with cols[i % 2]:
                        st.markdown(f'''
                        <div class="recommendation-card">
                            <h4>#{i+1} {menu_info['menu_name']}</h4>
                            <p><strong>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</strong> {menu_info['category']}</p>
                            <p><strong>‡∏£‡∏≤‡∏Ñ‡∏≤:</strong> {menu_info['price']:.0f} ‡∏ö‡∏≤‡∏ó</p>
                            <p><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°:</strong> {menu_info['popularity']:.1f}/5.0</p>
                            <p><strong>AI Score:</strong> {score:.3f}</p>
                        </div>
                        ''', unsafe_allow_html=True)
                except Exception as e:
                    st.error(f"Error displaying menu {menu_id}: {e}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            st.subheader("üìù ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£")
            customer_history = df_orders[df_orders['customer_id'] == selected_customer_id]
            
            if len(customer_history) > 0:
                history_summary = customer_history.groupby('menu_name').agg({
                    'quantity': 'sum',
                    'amount': 'sum',
                    'rating': 'mean'
                }).round(2).sort_values('quantity', ascending=False)
                
                st.dataframe(history_summary, use_container_width=True)
            else:
                st.info("‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£")
                
        except Exception as e:
            st.error(f"Error generating recommendations: {e}")

@st.cache_data
def cached_customer_segmentation(df_orders, df_customers, df_menu):
    """‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡πÉ‡∏ô cache"""
    try:
        segmentation = CustomerSegmentation(n_clusters=4)
        customer_features = segmentation.create_customer_features(df_orders, df_customers, df_menu)
        cluster_labels, segment_names = segmentation.fit_segments(customer_features)
        return cluster_labels, segment_names, customer_features
    except Exception as e:
        st.error(f"Error in customer segmentation: {e}")
        return None, None, None

def show_customer_analysis(df_customers, df_menu, df_orders):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"""
    
    st.header("üë• ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
    
    # ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö K-Means Clustering
    with st.expander("‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (K-Means Clustering)"):
        st.write("""
        **ü§ñ K-Means Clustering ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?**
        - ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° Machine Learning ‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡πà‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°
        - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏≠‡∏≤‡∏¢‡∏∏, ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á, rating, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏°‡∏ô‡∏π
        
        **üéØ ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå:**
        - ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
        - ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
        - ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        """)
    
    # Customer Segmentation
    try:
        with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤..."):
            cluster_labels, segment_names, customer_features = cached_customer_segmentation(df_orders, df_customers, df_menu)
        
        if cluster_labels is None:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ")
            return
        
        st.subheader("üè∑Ô∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (K-Means Clustering)")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
        segment_counts = pd.Series(cluster_labels).value_counts()
        segment_df = pd.DataFrame({
            'Cluster': segment_counts.index,
            'Count': segment_counts.values,
            'Percentage': (segment_counts.values / len(cluster_labels) * 100).round(1),
            'Segment_Name': [segment_names[i] for i in segment_counts.index]
        })
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig_pie = px.pie(segment_df, values='Count', names='Segment_Name', 
                           title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
            st.plotly_chart(fig_pie, use_container_width=True)
        
        with col2:
            st.subheader("üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö expandable
            for _, row in segment_df.iterrows():
                cluster_id = row['Cluster']
                
                # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç boolean indexing issue
                cluster_mask = np.array(cluster_labels) == cluster_id
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î mask ‡πÅ‡∏•‡∏∞ DataFrame
                if len(cluster_mask) == len(customer_features):
                    cluster_customers = customer_features[cluster_mask]
                else:
                    # ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡πÉ‡∏ä‡πâ iloc ‡πÅ‡∏ó‡∏ô
                    cluster_indices = np.where(np.array(cluster_labels) == cluster_id)[0]
                    cluster_customers = customer_features.iloc[cluster_indices]
                
                with st.expander(f"{row['Segment_Name']} - {row['Count']} ‡∏Ñ‡∏ô ({row['Percentage']:.1f}%)"):
                    if len(cluster_customers) > 0:
                        col_a, col_b, col_c = st.columns(3)
                        
                        with col_a:
                            avg_freq = cluster_customers['order_frequency'].mean()
                            st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_freq:.1f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                        
                        with col_b:
                            avg_budget = cluster_customers['avg_budget'].mean()
                            st.metric("‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"‡∏ø{avg_budget:,.0f}")
                        
                        with col_c:
                            avg_rating = cluster_customers['avg_rating'].mean()
                            st.metric("Rating ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_rating:.2f}/5.0")
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                        st.write("**üìà ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°:**")
                        col_x, col_y = st.columns(2)
                        
                        with col_x:
                            if 'recency' in cluster_customers.columns:
                                recency_avg = cluster_customers['recency'].mean()
                                st.write(f"‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {recency_avg:.1f} ‡∏ß‡∏±‡∏ô")
                            
                            if 'category_diversity' in cluster_customers.columns:
                                cat_div = cluster_customers['category_diversity'].mean()
                                st.write(f"‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {cat_div:.1f}")
                        
                        with col_y:
                            if 'total_quantity' in cluster_customers.columns:
                                total_qty = cluster_customers['total_quantity'].mean()
                                st.write(f"‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {total_qty:.1f}")
                            
                            if 'menu_diversity' in cluster_customers.columns:
                                menu_div = cluster_customers['menu_diversity'].mean()
                                st.write(f"‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏°‡∏ô‡∏π: {menu_div:.1f}")
                    else:
                        st.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° {cluster_id}")
        
        # Customer behavior analysis
        st.subheader("üìà ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü scatter plot
        customer_stats = df_orders.groupby('customer_id').agg({
            'rating': ['count', 'mean'],
            'amount': 'sum'
        }).round(2)
        
        customer_stats.columns = ['order_frequency', 'avg_rating', 'total_spent']
        customer_stats = customer_stats.reset_index()
        
        fig_scatter = px.scatter(
            customer_stats, 
            x='order_frequency', 
            y='total_spent',
            size='avg_rating',
            hover_data=['customer_id'],
            title="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á vs ‡∏¢‡∏≠‡∏î‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢",
            labels={
                'order_frequency': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á)',
                'total_spent': '‡∏¢‡∏≠‡∏î‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)'
            }
        )
        st.plotly_chart(fig_scatter, use_container_width=True)
        
    except Exception as e:
        st.error(f"Error in customer analysis: {e}")

def show_business_intelligence(df_customers, df_menu, df_orders):
    """‡∏´‡∏ô‡πâ‡∏≤ Business Intelligence"""
    
    st.header("üìä Business Intelligence Dashboard")
    
    # Key Metrics
    col1, col2, col3, col4 = st.columns(4)
    
    total_revenue = df_orders['amount'].sum()
    avg_order_value = df_orders['amount'].mean()
    total_customers = df_orders['customer_id'].nunique()
    total_orders = len(df_orders)
    
    with col1:
        st.metric("üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°", f"{total_revenue:,.0f} ‡∏ö‡∏≤‡∏ó")
    with col2:
        st.metric("üõí ‡∏¢‡∏≠‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå", f"{avg_order_value:.0f} ‡∏ö‡∏≤‡∏ó")
    with col3:
        st.metric("üë• ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠", f"{total_customers} ‡∏Ñ‡∏ô")
    with col4:
        st.metric("üìù ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{total_orders:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    st.markdown("---")
    
    # Charts
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        daily_sales = df_orders.groupby('order_date')['amount'].sum().reset_index()
        daily_sales['order_date'] = pd.to_datetime(daily_sales['order_date'])
        
        fig_line = px.line(daily_sales, x='order_date', y='amount', 
                          title="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        st.plotly_chart(fig_line, use_container_width=True)
    
    with col2:
        st.subheader("‚è∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        if 'order_time' in df_orders.columns:
            df_orders['hour'] = pd.to_datetime(df_orders['order_time'], format='%H:%M').dt.hour
        else:
            df_orders['hour'] = np.random.randint(7, 23, len(df_orders))
        
        hourly_sales = df_orders.groupby('hour')['amount'].sum().reset_index()
        
        fig_bar = px.bar(hourly_sales, x='hour', y='amount', 
                        title="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
        st.plotly_chart(fig_bar, use_container_width=True)
    
    # Top performers
    st.subheader("üèÜ Top Performers")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.write("**üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ**")
        try:
            if 'menu_name' in df_orders.columns and 'quantity' in df_orders.columns:
                top_menus = df_orders.groupby('menu_name').agg({
                    'quantity': 'sum',
                    'amount': 'sum'
                }).sort_values('quantity', ascending=False).head(5)
            else:
                # ‡πÉ‡∏ä‡πâ amount ‡πÅ‡∏ó‡∏ô quantity
                top_menus = df_orders.groupby('menu_name')['amount'].sum().nlargest(5).reset_index()
                top_menus.columns = ['menu_name', 'amount']
            st.dataframe(top_menus)
        except Exception as e:
            st.error(f"Error in top menus: {e}")
    
    with col2:
        st.write("**üëë ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ VIP**")
        try:
            top_customers = df_orders.groupby('customer_id')['amount'].sum().nlargest(5).reset_index()
            st.dataframe(top_customers)
        except Exception as e:
            st.error(f"Error in top customers: {e}")
    
    with col3:
        st.write("**üìä ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°**")
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ df_orders ‡∏°‡∏µ category ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if 'category' in df_orders.columns:
                # ‡πÉ‡∏ä‡πâ category ‡∏à‡∏≤‡∏Å df_orders ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                if 'quantity' in df_orders.columns:
                    category_performance = df_orders.groupby('category').agg({
                        'amount': 'sum',
                        'quantity': 'sum'
                    }).sort_values('amount', ascending=False)
                else:
                    category_performance = df_orders.groupby('category')['amount'].sum().reset_index()
                    category_performance.columns = ['category', 'amount']
                st.dataframe(category_performance)
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ category ‡πÉ‡∏ô df_orders ‡πÉ‡∏´‡πâ merge ‡∏Å‡∏±‡∏ö df_menu
                merged_data = None
                if 'menu_id' in df_orders.columns and 'menu_id' in df_menu.columns:
                    merged_data = df_orders.merge(df_menu, on='menu_id', how='left')
                elif 'menu_name' in df_orders.columns and 'menu_name' in df_menu.columns:
                    merged_data = df_orders.merge(df_menu, on='menu_name', how='left')
                
                if merged_data is not None and 'category' in merged_data.columns:
                    if 'quantity' in merged_data.columns:
                        category_performance = merged_data.groupby('category').agg({
                            'amount': 'sum',
                            'quantity': 'sum'
                        }).sort_values('amount', ascending=False)
                    else:
                        category_performance = merged_data.groupby('category')['amount'].sum().reset_index()
                        category_performance.columns = ['category', 'amount']
                    st.dataframe(category_performance)
                else:
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ merge ‡πÑ‡∏î‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏à‡∏≤‡∏Å df_menu
                    st.info("‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π")
                    if 'category' in df_menu.columns:
                        category_counts = df_menu['category'].value_counts().reset_index()
                        category_counts.columns = ['category', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π']
                        st.dataframe(category_counts)
                    else:
                        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
                        
        except Exception as e:
            st.error(f"Error in category performance: {e}")
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÅ‡∏ó‡∏ô
            try:
                if 'category' in df_menu.columns:
                    category_counts = df_menu['category'].value_counts().reset_index()
                    category_counts.columns = ['category', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π']
                    st.dataframe(category_counts)
                else:
                    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π")
            except Exception as inner_e:
                st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ: {inner_e}")

def show_model_performance(df_customers, df_menu, df_orders, user_item_matrix):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
    
    st.header("üìà ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏• AI")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
    with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•..."):
        model = load_model(user_item_matrix)
    
    if model is None:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ")
        return
    
    try:
        # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        evaluator = AdvancedRecommendationEvaluator(model)
        results = evaluator.evaluate_comprehensive(user_item_matrix, df_menu, df_orders, test_ratio=0.2)
        
        if results:
            st.success("‚úÖ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üéØ Precision@10", f"{results.get('precision@10', 0):.3f}")
                st.metric("üìä Recall@10", f"{results.get('recall@10', 0):.3f}")
            
            with col2:
                st.metric("‚≠ê NDCG@10", f"{results.get('ndcg@10', 0):.3f}")
                st.metric("üîÑ MRR", f"{results.get('mrr', 0):.3f}")
            
            with col3:
                st.metric("üåà Diversity", f"{results.get('diversity', 0):.3f}")
                st.metric("üì∫ Coverage", f"{results.get('catalog_coverage', 0):.3f}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            st.subheader("üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Metrics")
            
            metrics_data = {
                'Metric': ['Precision@5', 'Precision@10', 'Recall@5', 'Recall@10', 'NDCG@5', 'NDCG@10'],
                'Score': [
                    results.get('precision@5', 0),
                    results.get('precision@10', 0),
                    results.get('recall@5', 0),
                    results.get('recall@10', 0),
                    results.get('ndcg@5', 0),
                    results.get('ndcg@10', 0)
                ]
            }
            
            metrics_df = pd.DataFrame(metrics_data)
            fig_bar = px.bar(metrics_df, x='Metric', y='Score', 
                           title="‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏≤‡∏° Metrics ‡∏ï‡πà‡∏≤‡∏á‡πÜ")
            st.plotly_chart(fig_bar, use_container_width=True)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
            results_df = pd.DataFrame([results]).T
            results_df.columns = ['Score']
            results_df['Score'] = results_df['Score'].round(4)
            st.dataframe(results_df, use_container_width=True)
        
    except Exception as e:
        st.error(f"Error evaluating model: {e}")
    
    # Model Information
    st.subheader("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    st.write(f"""
    **ü§ñ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏°‡πÄ‡∏î‡∏•:** Matrix Factorization
    **üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Components:** 30
    **üìä ‡∏Ç‡∏ô‡∏≤‡∏î User-Item Matrix:** {user_item_matrix.shape[0]} √ó {user_item_matrix.shape[1]}
    **üìà Sparsity:** {(user_item_matrix == 0).sum().sum() / (user_item_matrix.shape[0] * user_item_matrix.shape[1]) * 100:.2f}%
    """)

if __name__ == "__main__":
    main()
